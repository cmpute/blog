<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | JacobZ</title><link>https://zyxin.xyz/blog/post/</link><description>JacobZ的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>cmpute@foxmail.com (Jacob Zhong)</managingEditor><webMaster>cmpute@foxmail.com (Jacob Zhong)</webMaster><lastBuildDate>Wed, 22 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>梅森素数测试软件教程</title><link>https://zyxin.xyz/blog/2023-02/mersenne-test-softwares/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2023-02/mersenne-test-softwares/</guid><description>&lt;p>最近又折腾了一下系统，顺便也就想尝试一下GIMPS别的跑法。本文总结了一下在GIMPS项目中推荐使用的几款软件以及它们的使用方法。关于什么是GIMPS，请参考&lt;a class="link" href="https://zyxin.xyz/blog/2021-11/utilize-your-computation-power/" >我之前的文章&lt;/a>。GIMPS项目依赖PrimeNet网络进行任务的分发和收集，目前在测试新的梅森素数时PrimeNet会依次分配三种任务：&lt;ruby>Trial&lt;rt>T&lt;/rt>&amp;nbsp;Factoring&lt;rt>F&lt;/rt>&lt;/ruby>、&lt;ruby>P-1&lt;rt>PM1&lt;/rt>&lt;/ruby>分解和&lt;ruby>Probable&amp;nbsp;Prime&lt;rt>PRP&lt;/rt>&lt;/ruby>测试。因此本文主要介绍这三类任务的运行方法和推荐策略。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2023-02/mersenne-test-softwares/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>我眼中的下一代互联网</title><link>https://zyxin.xyz/blog/2023-01/next-gen-web-imo/</link><pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2023-01/next-gen-web-imo/</guid><description>&lt;p>21年和22年随着区块链和加密货币的进一步发展，Web3的概念爆火，在这期间我有很多思考和想法，但是尚未形成体系。在又经历了FTX暴雷、BERT和ChatGPT模型的出现之后我渐渐有了自己对下一代互联网的畅想，记录于此还望指正交流。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2023-01/next-gen-web-imo/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>将博客移植到Hugo平台</title><link>https://zyxin.xyz/blog/2023-01/migrate-to-hugo/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2023-01/migrate-to-hugo/</guid><description>&lt;img src="https://zyxin.xyz/blog/2023-01/migrate-to-hugo/stack.png" alt="Featured image of post 将博客移植到Hugo平台" />又爱又恨的Hexo 为什么要换Hugo，说到底还是因为Hexo不够好用。非常感谢Hexo团队开发的这套平台，我用了五年了。现在仍然有很多博主的
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2023-01/migrate-to-hugo/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>（C语言）变长数组的陷阱</title><link>https://zyxin.xyz/blog/2022-07/the-pitfall-of-vla/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2022-07/the-pitfall-of-vla/</guid><description>&lt;details class="article-notice active-class note" open>
&lt;summary class="article-notice-title">
&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-pencil" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;path d="M4 20h4l10.5 -10.5a1.5 1.5 0 0 0 -4 -4l-10.5 10.5v4" />
&lt;line x1="13.5" y1="6.5" x2="17.5" y2="10.5" />
&lt;/svg>
&lt;span>前言&lt;/span>
&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-right" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;polyline points="9 6 15 12 9 18" />
&lt;/svg>
&lt;/summary>
&lt;div class="article-notice-body">
&lt;section>
这篇文章转载自&lt;a class="link" href="https://blog.joren.ga/vla-pitfalls" target="_blank" rel="noopener"
>Jorengarenar的博客&lt;/a>。类似于前一篇文章，这一篇博文是我在搜索为什么Rust不支持动态栈分配的时候看到的。有很多人希望Rust支持变长数组，并且有一个&lt;a class="link" href="https://github.com/rust-lang/rust/issues/48055" target="_blank" rel="noopener"
>相关的RFC&lt;/a>，但是&lt;a class="link" href="https://users.rust-lang.org/t/a-question-about-how-memory-is-stored-and-vlas/33901/16?u=cmpute" target="_blank" rel="noopener"
>也有人提到这很危险&lt;/a>，并且不会带来太大的收益，这篇文章总结了变长数组的问题，可供参考。
&lt;/section>
&lt;/div>
&lt;/details>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2022-07/the-pitfall-of-vla/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>长浮点数（long double）的陷阱</title><link>https://zyxin.xyz/blog/2022-07/the-pitfall-of-long-double/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2022-07/the-pitfall-of-long-double/</guid><description>&lt;details class="article-notice active-class note" open>
&lt;summary class="article-notice-title">
&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-pencil" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;path d="M4 20h4l10.5 -10.5a1.5 1.5 0 0 0 -4 -4l-10.5 10.5v4" />
&lt;line x1="13.5" y1="6.5" x2="17.5" y2="10.5" />
&lt;/svg>
&lt;span>前言&lt;/span>
&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-right" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;polyline points="9 6 15 12 9 18" />
&lt;/svg>
&lt;/summary>
&lt;div class="article-notice-body">
&lt;section>
&lt;p>此文转载自Prelert的博客，作者为David。这篇文章目前只能&lt;a class="link" href="https://web.archive.org/web/20170422155137/http://info.prelert.com/blog/author/david" target="_blank" rel="noopener"
>在WebArchive找到&lt;/a>了，因此我把此文转载并翻译到我的博客上。&lt;/p>
&lt;p>我是在搜索为什么Rust没有对应C/C++中&lt;code>long double&lt;/code>的数据类型的时候看到了这篇博文，Rust不提供对应的数据类型造成了一些互操作性的问题（参见&lt;a class="link" href="https://immunant.com/blog/2019/11/rust2020/#:~:text=long%20doubletypes%20in%20C%20are%20specified%20as%20being,with%20C%20code%2C%20Rust%20needs%20to%20support%20long" target="_blank" rel="noopener"
>这里&lt;/a>和&lt;a class="link" href="https://github.com/rust-lang/rust-bindgen/issues/1549" target="_blank" rel="noopener"
>这里&lt;/a>）。与此相对的是，Zig和新发布的Carbon语言都支持&lt;code>f16&lt;/code>和&lt;code>f128&lt;/code>数据类型（其中Zig还支持&lt;code>f80&lt;/code>，Carbon还支持&lt;code>bfloat16&lt;/code>）。不过这倒是不令人意外，因为Zig和Carbon都以与C/C++的极致兼容性为卖点。这篇博客也许能解释一部分Rust不支持更高精度浮点数的原因。&lt;/p>
&lt;/section>
&lt;/div>
&lt;/details>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2022-07/the-pitfall-of-long-double/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>冬日取暖最佳方式 — 利用闲置的计算资源</title><link>https://zyxin.xyz/blog/2021-11/utilize-your-computation-power/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-11/utilize-your-computation-power/</guid><description>&lt;img src="https://zyxin.xyz/blog/2021-11/utilize-your-computation-power/primenet-ranking.png" alt="Featured image of post 冬日取暖最佳方式 — 利用闲置的计算资源" />最近突发奇想，想到自己有几台电脑，性能都不错但是经常闲置，包括实验室的服务器也不是每时每刻都在充分利用资源，因此完全可以跑一些别的程序来利用
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-11/utilize-your-computation-power/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>让你的手机变身Linux — Termux设置</title><link>https://zyxin.xyz/blog/2021-11/termux-setup/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-11/termux-setup/</guid><description>&lt;p>Termux是一款在Android上运行的终端模拟器，其中内含了一个非常轻量的Linux环境，并且使用apt做包管理器。最新的Termux已经不在Play Store上更新了，安装需要去&lt;a class="link" href="https://github.com/termux/termux-app" target="_blank" rel="noopener"
>Github&lt;/a>或者&lt;a class="link" href="https://termux.com/" target="_blank" rel="noopener"
>官网&lt;/a>。旧版本的Termux在使用apt的时候可能会碰到问题。&lt;/p>
&lt;p>近来因为买了Surface Duo，在手机上稍微折腾了一下Termux，尝试是否能把手机变成Linux级别的生产力工具。结论当然是不可以，一方面性能不够，另一方面Termux上的包还是太少了，不过还是记录一下一些环境设置方法，供之后查阅。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-11/termux-setup/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>初识Rust - 从一个Python/C++/C#程序员的角度对比Rust</title><link>https://zyxin.xyz/blog/2021-10/first-glance-on-rust/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-10/first-glance-on-rust/</guid><description>&lt;p>近些年一直有听闻Rust的发展，相比其他新语言（如julia），我觉得Rust是切实解决了一些程序开发的痛点的，并且Rust比较适合作为底层软件开发的语言，我很感兴趣。Rust官方有一本&lt;a class="link" href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noopener"
>Gitbook教程&lt;/a>，因此我就直接通过阅读它来上手Rust了。&lt;/p>
&lt;p>本文记录一些我在看完这本书之后初步总结的一些Rust与我熟悉的Python/C++/C#之间的各方面的异同。如果你也有Python/C++/C#的编程经验，并且想上手Rust，那么这篇文章应该能帮助你概括性地了解Rust的特性。本文也是我对Python/C++/C#之间特性的一个对比总结，但是我对这些语言的了解也没有那么深，因此如有谬误还请指教。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-10/first-glance-on-rust/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>一句话选择现代编程语言</title><link>https://zyxin.xyz/blog/2021-08/one-line-per-program-lang/</link><pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-08/one-line-per-program-lang/</guid><description>&lt;p>最近几年一直有新的编程语言变火，也不断的有新概念的出现。我一直有打算了解各种新的编程语言，并且如果有前景的话多学一门语言也是挺好的。因此本文总结我在了解一些流行的现代语言的过程中，记下来他们的各种特点。如果你也有兴趣尝试新的语言，那么希望这个文章可以帮到你~&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-08/one-line-per-program-lang/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>ACGN收藏 - 音频编码与格式</title><link>https://zyxin.xyz/blog/2021-07/acgn-audio-formats/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-07/acgn-audio-formats/</guid><description>&lt;p>在我的收藏里面，音乐是占大头的。我非常喜欢尝试各种风格的音乐，也非常喜欢日本音乐圈的多样性，因此收集了很多。在这过程中也了解到了一些音频格式的内容~我也&lt;a class="link" href="https://github.com/cmpute/audio-codec-benchmark" target="_blank" rel="noopener"
>自己做过一个benchmark&lt;/a>，比较不同音频编码的性能区别，如果有兴趣的话可以自己尝试一下~。&lt;/p>
&lt;p>我个人喜欢收藏无损音乐，目的不仅仅是因为高音质，而是无损意味着“无损”，音质与CD或者其他音源是完全一致的（当然，这个一致性音频编码本身并不能保证音源的完整性，但是如果有其他的辅助信息如EAC log，或者AccurateRip测试结果就完全可以保证了）。在这个情况下我把无损压成有损，就能保证这个有损是达到了预期的音质。如果是网上直接下载有损的话，一是很难确定这个有损有没有经过二次压缩，造成额外音质损失，二是有损也最好不要再转换格式了，同样是因为音质损失，这就造成了额外的不便。&lt;/p>
&lt;p>本文就介绍一下我了解的与音频编码相关的知识，以及各种常用音频编码格式的比较。更全面的格式对比可以&lt;a class="link" href="https://en.wikipedia.org/wiki/Comparison_of_audio_coding_formats" target="_blank" rel="noopener"
>参考Wikipedia页面&lt;/a>。另外需要指明的是，本文的介绍基于音乐收藏和本地播放的目的，与流媒体的需求不同，后者追求稳定的码率、低延迟甚至是低能耗。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-07/acgn-audio-formats/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>MegaFavNumbers - 最喜爱的百万数字</title><link>https://zyxin.xyz/blog/2021-07/mega-fav-numbers/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-07/mega-fav-numbers/</guid><description>&lt;p>这篇博客也是拖了很久了，简直是蹭热度都蹭不到热的。。。去年年底有一帮数学家和喜欢数学的人（Numberphile）发起了一个Youtube系列，叫&lt;a class="link" href="https://www.youtube.com/hashtag/megafavnumbers" target="_blank" rel="noopener"
>#MegaFavNumbers&lt;/a>，也就是介绍自己最喜欢的大于一百万的数字。虽然没有要求这个数字是整数，但是Numberphile一般只关注整数（甚至仅自然数）。如果没有这个限制的话，那物理化学上就有很多常数了，例如某视频评论区有人提到阿伏伽德罗常数23333&lt;/p>
&lt;p>如果让我来选的话我还真想不太出来，毕竟没学多少数学，顶多会选$2^{32}$这种程序员知道的数字，或者已知最大的质数、孪生质数云云。这个题目真的是很有意思了，很多有特殊性质的数字或者是某数列的第一个数都会比较小，很少会有一个非常大并且独一无二的数字，因此看了3Blue1Brown的视频之后我顿时就来了兴趣，&lt;del>准备&lt;/del>写下这篇博客介绍以下各博主选择的数字，又了解一些平常不知道的冷知识~哈哈。我大致将这些数字分了个类，不过不是很严格。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-07/mega-fav-numbers/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>ACGN 收藏者的自我修养</title><link>https://zyxin.xyz/blog/2021-07/acgn-collection/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-07/acgn-collection/</guid><description>&lt;p>很久没写博客了，这次想总结一下自己在ACGN收藏这条道路上越走越远，到底都走了哪些弯路哈哈哈哈 &lt;del>（博客画风突变）&lt;/del>。这一篇算是一个开篇稿吧，想写的内容有挺多的，一些比较短的内容会放在这一篇底下。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-07/acgn-collection/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>ACGN收藏 - 文件管理</title><link>https://zyxin.xyz/blog/2021-07/acgn-file-management/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-07/acgn-file-management/</guid><description>&lt;p>对于ACGN收藏来说，文件管理是一个基础任务，毕竟收藏的文件内容多种多样，例如光盘镜像、压制后的音频视频、小册子扫描、字幕甚至小游戏等。把文件按一定结构整理是必要的，我也专门为整理音乐写了&lt;a class="link" href="https://github.com/cmpute/Fluss" target="_blank" rel="noopener"
>一些小工具&lt;/a>，不过整理文件的格式因人而异，也没有特别的难度，因此不需要特别描述我是怎么做的。我觉得值得一提的内容是如何对文件进行定期存档和备份，这也是我在硬盘被偷之后立马开始对收藏的文件进行的操作。备份有一个3-2-1的原则：3份备份，2份本地，1份云端，下面会介绍一些本地的备份和云端备份的方法以及我的选择。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-07/acgn-file-management/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>“音频发烧友” / “Audiophile” 入门及杂谈</title><link>https://zyxin.xyz/blog/2020-12/audiophile-introduction/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2020-12/audiophile-introduction/</guid><description>&lt;p>最近买了一些新的耳机，但是买完总感觉自己被收智商税了，于是就查查查了好多资料。这篇文章介绍我理解下音频发烧友的一些词汇是什么意思，如果你不烧耳机音响，但是想了解这个群体的，这个文章也能作为一个入门参考～Hifi领域有很多词汇我也没懂的，我也写在文章里了，如果有老烧路过请指教一二。我尝试用我学过的知识来客观解释音频领域的知识，我没上过信号处理，相关课程只上过自动控制和离散控制。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2020-12/audiophile-introduction/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>Minecraft 1.12建服及侦测器BUD</title><link>https://zyxin.xyz/blog/2020-12/mc-bud-112/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2020-12/mc-bud-112/</guid><description>进来给实验室的服务器上装了个Minecraft服务器，给大家闲来无事上来种种菜，顺便体验一下新版本的特性。之前最高只玩过1.8，现在虽然更新
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2020-12/mc-bud-112/">网页&lt;/a>以阅读全文。&lt;/em></description></item></channel></rss>