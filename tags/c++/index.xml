<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ | JacobZ</title><link>https://zyxin.xyz/blog/tags/c++/</link><description>JacobZ的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>cmpute@foxmail.com (Jacob Zhong)</managingEditor><webMaster>cmpute@foxmail.com (Jacob Zhong)</webMaster><lastBuildDate>Fri, 29 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zyxin.xyz/blog/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>初识Rust - 从一个Python/C++/C#程序员的角度对比Rust</title><link>https://zyxin.xyz/blog/2021-10/first-glance-on-rust/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2021-10/first-glance-on-rust/</guid><description>&lt;p>近些年一直有听闻Rust的发展，相比其他新语言（如julia），我觉得Rust是切实解决了一些程序开发的痛点的，并且Rust比较适合作为底层软件开发的语言，我很感兴趣。Rust官方有一本&lt;a class="link" href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noopener"
>Gitbook教程&lt;/a>，因此我就直接通过阅读它来上手Rust了。&lt;/p>
&lt;p>本文记录一些我在看完这本书之后初步总结的一些Rust与我熟悉的Python/C++/C#之间的各方面的异同。如果你也有Python/C++/C#的编程经验，并且想上手Rust，那么这篇文章应该能帮助你概括性地了解Rust的特性。本文也是我对Python/C++/C#之间特性的一个对比总结，但是我对这些语言的了解也没有那么深，因此如有谬误还请指教。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2021-10/first-glance-on-rust/">网页&lt;/a>以阅读全文。&lt;/em></description></item><item><title>如何选择Python与C++之间的胶水</title><link>https://zyxin.xyz/blog/2019-08/glue-python-cpp/</link><pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate><author>cmpute@foxmail.com (Jacob Zhong)</author><guid>https://zyxin.xyz/blog/2019-08/glue-python-cpp/</guid><description>&lt;p>Python作为一门胶水语言，它与C/C++之间的兼容性（Interoperability）我认为是它相比其他动态语言脱颖而出的最大原因。Python原生支持的是与C语言的接口，Python的发行版自带有&lt;code>Python.h&lt;/code>头文件，里面提供了在C中调用Python和反过来在Python中调用C的接口定义。但是C++就不一样了，虽然C++ ⇔ C ⇔ Python的通道是可行的，但是想要完整兼容C++的特性的话需要很多额外的重复代码（boilerplate）。因此相应针对Python/C++绑定的库也就应运而生了，我所了解的库主要有四个：&lt;a class="link" href="https://www.boost.org/doc/libs/1_70_0/libs/python/doc/html/index.html" target="_blank" rel="noopener"
>Boost.Python&lt;/a>，&lt;a class="link" href="https://cython.org/" target="_blank" rel="noopener"
>Cython&lt;/a>，&lt;a class="link" href="https://pybind11.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>pybind11&lt;/a>，&lt;a class="link" href="http://www.swig.org/" target="_blank" rel="noopener"
>SWIG&lt;/a>。虽然网上也有不少比较三者的页面，但是我觉得都不够详细，这篇博客就介绍一下我基于使用这几个库的经验比较。&lt;/p>
&lt;hr/>&lt;em>前往&lt;a href="https://zyxin.xyz/blog/2019-08/glue-python-cpp/">网页&lt;/a>以阅读全文。&lt;/em></description></item></channel></rss>